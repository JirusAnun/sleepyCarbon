[{"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/index.js":"1","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/config.js":"2","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/serviceWorker.js":"3","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/App.js":"4","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/utils/history.js":"5","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/utils/initFontAwesome.js":"6","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/Loading.js":"7","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/NavBar.js":"8","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/Profile.js":"9","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/Admin.js":"10","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/AdminLogin.js":"11","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/MarketPlace.js":"12","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/credit.js":"13","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/Home.js":"14","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/Content.js":"15","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/Hero.js":"16","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/utils/contentData.js":"17"},{"size":1256,"mtime":1689750782000,"results":"18","hashOfConfig":"19"},{"size":772,"mtime":1689750782000,"results":"20","hashOfConfig":"19"},{"size":4951,"mtime":1689750782000,"results":"21","hashOfConfig":"19"},{"size":1617,"mtime":1691560398031,"results":"22","hashOfConfig":"19"},{"size":87,"mtime":1689750782000,"results":"23","hashOfConfig":"19"},{"size":279,"mtime":1689750782000,"results":"24","hashOfConfig":"19"},{"size":202,"mtime":1691561475039,"results":"25","hashOfConfig":"19"},{"size":4811,"mtime":1691561154647,"results":"26","hashOfConfig":"19"},{"size":2839,"mtime":1691511488826,"results":"27","hashOfConfig":"19"},{"size":8013,"mtime":1691560837707,"results":"28","hashOfConfig":"19"},{"size":2863,"mtime":1691519902744,"results":"29","hashOfConfig":"19"},{"size":3198,"mtime":1691557912167,"results":"30","hashOfConfig":"19"},{"size":7074,"mtime":1691560201273,"results":"31","hashOfConfig":"19"},{"size":213,"mtime":1691512051640,"results":"32","hashOfConfig":"19"},{"size":860,"mtime":1689750782000,"results":"33","hashOfConfig":"19"},{"size":398,"mtime":1691512777835,"results":"34","hashOfConfig":"19"},{"size":1393,"mtime":1689750782000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tma0hq",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/index.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/config.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/serviceWorker.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/App.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/utils/history.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/utils/initFontAwesome.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/Loading.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/NavBar.js",["92"],[],"import React, { useState } from \"react\";\nimport { NavLink as RouterNavLink, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  Collapse,\n  Container,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst NavBar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    user,\n    isAuthenticated,\n    loginWithRedirect,\n    logout,\n  } = useAuth0();\n  const toggle = () => setIsOpen(!isOpen);\n\n  const logoutWithRedirect = () =>\n      logout({\n        logoutParams: {\n          returnTo: window.location.origin,\n        },\n      });\n\n  return (\n      <div className=\"nav-container\">\n        <Navbar color=\"light\" light expand=\"md\" container={false}>\n          <Container>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n                <NavItem>\n                  <NavLink\n                      tag={RouterNavLink}\n                      to=\"/\"\n                      exact\n                      activeClassName=\"router-link-exact-active\"\n                  >\n                    Home\n                  </NavLink>\n                </NavItem>\n                {isAuthenticated && (\n                    <NavItem>\n                      <NavLink\n                          tag={RouterNavLink}\n                          to=\"/credit\"\n                          exact\n                          activeClassName=\"router-link-exact-active\"\n                      >\n                        Credit\n                      </NavLink>\n                    </NavItem>\n                )}\n                {isAuthenticated && (\n                    <NavItem>\n                      <NavLink\n                          tag={RouterNavLink}\n                          to=\"/marketplace\"\n                          exact\n                          activeClassName=\"router-link-exact-active\"\n                      >\n                        Marketplace\n                      </NavLink>\n                    </NavItem>\n                )}\n              </Nav>\n              <Nav className=\"d-none d-md-block\" navbar>\n                {isAuthenticated ? (\n                    <UncontrolledDropdown nav inNavbar>\n                      <DropdownToggle nav caret id=\"profileDropDown\">\n                        <img\n                            src={user.picture}\n                            alt=\"Profile\"\n                            className=\"nav-user-profile rounded-circle\"\n                            width=\"50\"\n                        />\n                      </DropdownToggle>\n                      <DropdownMenu>\n                        <DropdownItem header>{user.name}</DropdownItem>\n                        <DropdownItem\n                            tag={RouterNavLink}\n                            to=\"/profile\"\n                            className=\"dropdown-profile\"\n                            activeClassName=\"router-link-exact-active\"\n                        >\n                          <FontAwesomeIcon icon=\"user\" className=\"mr-3\" /> Profile\n                        </DropdownItem>\n                        <DropdownItem\n                            id=\"qsLogoutBtn\"\n                            onClick={() => logoutWithRedirect()}\n                        >\n                          <FontAwesomeIcon icon=\"power-off\" className=\"mr-3\" /> Log\n                          out\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                ) : (\n                    <NavItem>\n                      <Button\n                          id=\"qsLoginBtn\"\n                          color=\"primary\"\n                          className=\"btn-margin\"\n                          onClick={() => loginWithRedirect()}\n                      >\n                        Log in\n                      </Button>\n                    </NavItem>\n                )}\n              </Nav>\n              <Nav className=\"d-md-none\" navbar>\n                {isAuthenticated ? (\n                    <NavItem>\n                      <Button\n                          id=\"qsLogoutBtn\"\n                          color=\"primary\"\n                          block\n                          tag={Link}\n                          to=\"/marketplace\"\n                          onClick={() => logoutWithRedirect()}\n                      >\n                        Log out\n                      </Button>\n                    </NavItem>\n                ) : null}\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </div>\n  );\n};\n\nexport default NavBar;\n","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/Profile.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/Admin.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/AdminLogin.js",["93"],[],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    Container,\n    Row,\n    Col,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Alert,\n} from \"reactstrap\";\n\nconst AdminLogin = () => {\n    const history = useHistory();\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [submittedData, setSubmittedData] = useState(null); // Track submitted data\n\n    const handleLogin = () => {\n        // In a real application, you would call an API to authenticate the user.\n        // For this example, we'll compare credentials with the mock backend.\n        const users = require(\"./user.json\"); // Import the mock user data\n\n        const user = users.find(\n            (user) =>\n                user.username === username && user.password === password\n        );\n        if (user) {\n            // Set user info in local storage or context for authentication\n            // In a real application, you would handle authentication securely\n            localStorage.setItem(\"adminUser\", JSON.stringify(user));\n            history.push(\"/admin\");\n        } else {\n            setError(\"Invalid credentials\");\n            setTimeout(() => setError(\"\"), 3000); // Clear error after 3 seconds\n        }\n\n        // Store submitted data for display\n        setSubmittedData({ username, password });\n    };\n\n    return (\n        <Container className=\"text-center\">\n            <Row>\n                <Col xs={12} sm={8} md={6} lg={4} className=\"mx-auto mt-5\">\n                    <h1>Admin Login</h1>\n                    {error && <Alert color=\"danger\">{error}</Alert>}\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"username\">Username</Label>\n                            <Input\n                                type=\"text\"\n                                id=\"username\"\n                                value={username}\n                                onChange={(e) => setUsername(e.target.value)}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"password\">Password</Label>\n                            <Input\n                                type=\"password\"\n                                id=\"password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            />\n                        </FormGroup>\n                        <Button color=\"primary\" onClick={handleLogin}>\n                            Login\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default AdminLogin;\n","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/MarketPlace.js",["94","95","96"],[],"import React, { useState } from \"react\";\nimport { Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport \"./Marketplace.css\"; // Import your CSS file for styling\n\nconst Marketplace = () => {\n    const couponItems = [\n        { title: \"Coupon 1\", description: \"Description 1\", price: \"$5.00\", available: 10 },\n        { title: \"Coupon 2\", description: \"Description 2\", price: \"$10.00\", available: 5 },\n        { title: \"Coupon 3\", description: \"Description 3\", price: \"$7.50\", available: 8 },\n        { title: \"Coupon 4\", description: \"Description 4\", price: \"$12.00\", available: 3 },\n        { title: \"Coupon 5\", description: \"Description 5\", price: \"$8.50\", available: 6 },\n        { title: \"Coupon 6\", description: \"Description 6\", price: \"$15.00\", available: 2 },\n        // Repeat similar entries as needed\n    ];\n\n    const [modal, setModal] = useState(false);\n    const [selectedCoupon, setSelectedCoupon] = useState(null);\n    const [score, setScore] = useState(100); // Example score, you can replace with actual logic\n\n    const toggleModal = () => {\n        setModal(!modal);\n    };\n\n    const handleBuyButtonClick = (coupon) => {\n        setSelectedCoupon(coupon);\n        toggleModal();\n    };\n\n    const handleConfirmPurchase = () => {\n        // Perform purchase logic here if needed\n        toggleModal();\n    };\n\n    return (\n        <div className=\"marketplace-container\">\n            <h1 className=\"marketplace-title\">Marketplace</h1>\n            <p className=\"marketplace-score\">Score: {score}</p> {/* Display the score */}\n            <div className=\"coupon-grid\">\n                {couponItems.map((coupon, index) => (\n                    <div key={index} className=\"coupon-item\">\n                        <div className=\"coupon-content\">\n                            <h2 className=\"title\">{coupon.title}</h2>\n                            <p className=\"description\">{coupon.description}</p>\n                            <p className=\"price\">{coupon.price}</p>\n                            <p className=\"available\">Available: {coupon.available}</p>\n                            <button\n                                className=\"buy-button\"\n                                onClick={() => handleBuyButtonClick(coupon)}\n                            >\n                                Buy\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            <Modal isOpen={modal} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>Confirm Purchase</ModalHeader>\n                <ModalBody>\n                    Are you sure you want to buy {selectedCoupon?.title} for{\" \"}\n                    {selectedCoupon?.price}?\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" onClick={handleConfirmPurchase}>\n                        Confirm\n                    </Button>{\" \"}\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Cancel\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n};\n\nexport default Marketplace;\n","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/credit.js",["97"],[],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Alert,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from \"reactstrap\";\nimport {\n  useAuth0,\n  withAuthenticationRequired,\n} from \"@auth0/auth0-react\";\nimport { getConfig } from \"../config\";\nimport Loading from \"../components/Loading\";\n\nconst ExternalApiComponent = () => {\n  const { apiOrigin = \"http://localhost:3001\", audience } = getConfig();\n\n  const [state, setState] = useState({\n    showResult: false,\n    apiMessage: \"\",\n    error: null,\n    showReportModal: false,\n    showDonateModal: false,\n    email: \"\",\n    score: 0,\n    reportName: \"\",\n    reportDescription: \"\",\n    reportDate: \"\",\n    reportImage: null,\n  });\n\n  const {\n    getAccessTokenSilently,\n    loginWithPopup,\n    getAccessTokenWithPopup,\n  } = useAuth0();\n\n  const toggleReportModal = () => {\n    setState((prevState) => ({\n      ...prevState,\n      showReportModal: !prevState.showReportModal,\n    }));\n  };\n\n  const toggleDonateModal = () => {\n    setState((prevState) => ({\n      ...prevState,\n      showDonateModal: !prevState.showDonateModal,\n    }));\n  };\n\n  const handleConsent = async () => {\n    try {\n      await getAccessTokenWithPopup();\n      setState({\n        ...state,\n        error: null,\n      });\n    } catch (error) {\n      setState({\n        ...state,\n        error: error.error,\n      });\n    }\n\n    await callApi();\n  };\n\n  const handleLoginAgain = async () => {\n    try {\n      await loginWithPopup();\n      setState({\n        ...state,\n        error: null,\n      });\n    } catch (error) {\n      setState({\n        ...state,\n        error: error.error,\n      });\n    }\n\n    await callApi();\n  };\n\n  const callApi = async () => {\n    try {\n      const token = await getAccessTokenSilently();\n\n      const response = await fetch(`${apiOrigin}/api/external`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const responseData = await response.json();\n\n      setState({\n        ...state,\n        showResult: true,\n        apiMessage: responseData,\n      });\n    } catch (error) {\n      setState({\n        ...state,\n        error: error.error,\n      });\n    }\n  };\n\n  const handle = (e, fn) => {\n    e.preventDefault();\n    fn();\n  };\n\n  const handleDonate = async () => {\n    // You can fetch the form data and send it to your backend here\n    toggleDonateModal();\n  };\n\n  const handleReportSubmit = async () => {\n    // You can fetch the report form data and send it to your backend here\n    toggleReportModal();\n  };\n\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    setState({\n      ...state,\n      reportImage: file,\n    });\n  };\n\n  const handleEmailChange = (e) => {\n    setState({\n      ...state,\n      email: e.target.value,\n    });\n  };\n\n  const handleScoreChange = (e) => {\n    setState({\n      ...state,\n      score: parseInt(e.target.value),\n    });\n  };\n\n  return (\n      <div className=\"text-center d-flex justify-content-center align-items-center h-100\">\n        <div>\n          <h1>Carbon credit: 100</h1>\n          <div className=\"mb-5\">\n            {state.error === \"consent_required\" && (\n                <Alert color=\"warning\">\n                  You need to{\" \"}\n                  <a\n                      href=\"#/\"\n                      className=\"alert-link\"\n                      onClick={(e) => handle(e, handleConsent)}\n                  >\n                    consent to get access to users api\n                  </a>\n                </Alert>\n            )}\n\n            {state.error === \"login_required\" && (\n                <Alert color=\"warning\">\n                  You need to{\" \"}\n                  <a\n                      href=\"#/\"\n                      className=\"alert-link\"\n                      onClick={(e) => handle(e, handleLoginAgain)}\n                  >\n                    log in again\n                  </a>\n                </Alert>\n            )}\n            <Button color=\"primary\" className=\"mt-3 mr-2\" onClick={toggleReportModal}>\n              Report Activity\n            </Button>\n            <Button color=\"primary\" className=\"mt-3\" onClick={toggleDonateModal}>\n              Donate Carbon Credit\n            </Button>\n          </div>\n        </div>\n        <Modal isOpen={state.showReportModal} toggle={toggleReportModal}>\n          <ModalHeader toggle={toggleReportModal}>Report Activity</ModalHeader>\n          <ModalBody>\n            <form>\n              <label>Report Name:</label>\n              <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={state.reportName}\n                  onChange={(e) =>\n                      setState({ ...state, reportName: e.target.value })\n                  }\n              />\n              <label>Report Description:</label>\n              <textarea\n                  className=\"form-control\"\n                  rows=\"3\"\n                  value={state.reportDescription}\n                  onChange={(e) =>\n                      setState({ ...state, reportDescription: e.target.value })\n                  }\n              />\n              <label>Date:</label>\n              <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  value={state.reportDate}\n                  onChange={(e) =>\n                      setState({ ...state, reportDate: e.target.value })\n                  }\n              />\n              <label>Image:</label>\n              <input\n                  type=\"file\"\n                  className=\"form-control-file\"\n                  onChange={handleImageChange}\n              />\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={handleReportSubmit}>\n              Submit\n            </Button>{\" \"}\n            <Button color=\"secondary\" onClick={toggleReportModal}>\n              Close\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Modal isOpen={state.showDonateModal} toggle={toggleDonateModal}>\n          <ModalHeader toggle={toggleDonateModal}>Donate Carbon Credit</ModalHeader>\n          <ModalBody>\n            <form>\n              <label>Email:</label>\n              <input\n                  type=\"email\"\n                  className=\"form-control\"\n                  value={state.email}\n                  onChange={handleEmailChange}\n              />\n              <label>Score:</label>\n              <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  value={state.score}\n                  onChange={handleScoreChange}\n              />\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={handleDonate}>\n              Submit\n            </Button>{\" \"}\n            <Button color=\"secondary\" onClick={toggleDonateModal}>\n              Close\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n  );\n};\n\nexport default withAuthenticationRequired(ExternalApiComponent, {\n  onRedirecting: () => <Loading />,\n});\n","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/views/Home.js",["98"],[],"import React, { Fragment } from \"react\";\n\nimport Hero from \"../components/Hero\";\nimport Content from \"../components/Content\";\n\nconst Home = () => (\n  <Fragment>\n    <Hero />\n  </Fragment>\n);\n\nexport default Home;\n","/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/Content.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/components/Hero.js",[],[],"/Users/jirusanun/Documents/GitHub/sleepyCarbon/src/utils/contentData.js",[],[],{"ruleId":"99","severity":1,"message":"100","line":9,"column":3,"nodeType":"101","messageId":"102","endLine":9,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":20,"column":12,"nodeType":"101","messageId":"102","endLine":20,"endColumn":25},{"ruleId":"99","severity":1,"message":"104","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":13},{"ruleId":"99","severity":1,"message":"105","line":2,"column":15,"nodeType":"101","messageId":"102","endLine":2,"endColumn":18},{"ruleId":"99","severity":1,"message":"106","line":18,"column":19,"nodeType":"101","messageId":"102","endLine":18,"endColumn":27},{"ruleId":"99","severity":1,"message":"107","line":18,"column":48,"nodeType":"101","messageId":"102","endLine":18,"endColumn":56},{"ruleId":"99","severity":1,"message":"108","line":4,"column":8,"nodeType":"101","messageId":"102","endLine":4,"endColumn":15},"no-unused-vars","'NavbarBrand' is defined but never used.","Identifier","unusedVar","'submittedData' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'setScore' is assigned a value but never used.","'audience' is assigned a value but never used.","'Content' is defined but never used."]